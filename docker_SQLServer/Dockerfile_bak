# FROM mcr.microsoft.com/mssql/server:2019-latest
# RUN -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=passw0rd1!" -p 1401:1433 -d mcr.microsoft.com/mssql/server:2019-latest


# docker pull mcr.microsoft.com/mssql/server:2019-latest

##only one sql server can point to a volume. System  databases (in addition to use databases)are also stored here
#docker volume create sql_volume
#docker volume ls
#docker volume inspect sql_volume

##you can remove to -d parameter for debuggine (to look at the log to see the problems, say with, server startup)
#docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=passw0rd1!" -p 1401:1433 --name sql2019 -v sql_volume:/var/opt/mssql -d mcr.microsoft.com/mssql/server:2019-latest

##if the volume persistence logic works, you would have to restore the db only once. Handle that.
#docker cp "C:/mssqlsrv2019/backup/Adventure Works 2014 Full Database Backup/AdventureWorks2014.bak" sql2019:/var/backups/AdventureWorks2014.bak
##after this you can connect to sql serverrunning in container using sqlcmd, ssms or data studio at localhost,1401 and sa/passw0rd1!
##and then restore the dtabase in the container
#RESTORE DATABASE AdventureWorks2014 FROM DISK = '/var/backups/AdventureWorks2014.bak'
# WITH
# MOVE 'AdventureWorks2014_Data' TO '/var/opt/mssql/data/Adventureworks2014.mdf',
# MOVE 'AdventureWorks2014_Log' TO '/var/opt/mssql/data/Adventureworks2014.ldf'

#docker container ls 
#docker exec -it sql2019 "bash"
##this i running the sqlcmd. TODO: try using the sql cli as it has intellisense.
##since this is running inside the container, u dont need to supply the port number even as by default it will use 1433
#/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "passw0rd1!"
#docker stop sql2019
# docker rm sql2019
#docker start sql2019

##will this work for volume creation: 
sudo docker run\
 -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=Sql2017isfast'\
  --hostname sql2\
  -p 1402:1433\
  -v sqlvolume2:/var/opt/mssql\
  --name sql2\
  -d\
  mcr.microsoft.com/mssql/server:2017-latest-ubuntu